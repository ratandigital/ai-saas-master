datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model imageCreate {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  ansMassage  String
  promtMassage String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  email       String   @unique
  images      imageCreate[]
}


model UserSubscription {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}



model UserApiLimit {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @unique
  count         Int            @default(0)
  createdAt DateTime? @default(now())
  updatedAt     DateTime       @updatedAt
  testApiLimitIds String[]      // Store IDs of testApiLimits as an array of strings
  imageCreateId String[]      // Store IDs of testApiLimits as an array of strings
}

model testApiLimit {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  createdAt    DateTime      @default(now())
  promtMassage String
  ansMassage   String
}




model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  amount    Float
  status    String
  remark    String?
  orderType String   // New field for order type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
